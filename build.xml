<project xmlns:if="ant:if" xmlns:unless="ant:unless" 
   name="swinburne-static"
   default="previewArticle">
  
  
  
  <description>
    Apache Ant buildfile for The Algernon Charles Swiburne Project.
  </description>
  
  <!-- 
    See build-properties.xml for the settings used in this file. When referenced, 
    properties look like this:
      ${toDir}
    For more information, see https://ant.apache.org/manual/Tasks/xmlproperty.html
  -->
  <xmlproperty file="build-properties.xml" keepRoot="false"/>
  
  <!-- Define the relative path from the swinburne-static repository (this directory) to the 
    directory which will hold the directory of generated static site files, as well 
    as the full compressed site and derived Ant build file. -->
  <property name="toDir.base" value="..${file.separator}${toDir}"/>
  
  <!-- Within ${toDir.base}, individually generated static site files will be 
    written to the ${context} directory. -->
  <property name="toDir.static" value="${toDir.base}${file.separator}${context}"/>
  <property name="toDir.tmpHTML" value="${toDir.base}${file.separator}${file.separator}tmpHTML"/>
  
  
  

  <!-- Check for the XML Resolver Java class, as it is a dependency for using the 
    Saxon HE processor. From the Saxon documentation on XSLT with Ant:
      "In particular, the classpath attribute of the xslt task element has been 
      unreliable: the safest approach is to ensure that the Jar files needed to run 
      Saxon are present on the externally-specified classpath (the classpath at the 
      point where Ant is invoked), rather than relying on the task-specific 
      classpath."
    https://www.saxonica.com/html/documentation11/using-xsl/xsltfromant.html
   -->
  <available classname="org.xmlresolver.Resolver" property="has.xmlresolver"/>
  
  
  <!-- 
    ANT TASKS
  -->
  
  <!-- If the XML Resolver JAR file is not already loaded, provide instructions for 
    running Ant with the "lib" command line option. Ant <target>s that use Saxon HE 
    should list this one as a dependency. -->
  <target name="checkXmlResolver">
    <echo unless:true="${has.xmlresolver}" level="error"
>XSL transformations cannot occur unless the XML Resolver JAR 
is loaded when Ant starts up. Please run Ant again like this:
      ant -lib common${file.separator}lib${file.separator}saxon</echo>
    <fail unless="${has.xmlresolver}">Java class `org.xmlresolver.Resolver` is not available.</fail>
    <!-- Otherwise, a little acknowledgement that this build target succeeded. -->
    <echo level="info">OK</echo>
  </target>
  
  <target name="help">
    <echo>** Swinburne Project static site generation build process **</echo>
    <echo></echo>
    <echo>General format:</echo>
    <echo>  ant [-lib common${file.separator}lib${file.separator}saxon] [-Dprop=val ...] [target ...]</echo>
    <echo>Where:</echo>
    <echo>-lib common${file.separator}lib${file.separator}saxon</echo>
    <echo>  is required if the chosen target performs XSL transformations, but is optional otherwise.</echo>
    <echo>-Dprop=val</echo>
    <echo>  is how you send parameters (which ant calls “properties”) to the process; typically</echo>
    <echo>  used to say which specific article file to work on, e.g. “-Ddocument.id=000370”.</echo>
    <echo>  (The “...” just means that you can use multiple -Dprop=val, as needed.)</echo>
    <echo>target</echo>
    <echo>  indicates what you want done. For a list of possible targets with short descriptions,</echo>
    <echo>  issue `ant -projecthelp`. For longer descriptions, read on.</echo>
    <echo/>
    <echo>Targets:</echo>
    <echo>       (Note that the “...” above means you can execute multiple targets at once;</echo>
    <echo>        however, this should rarely be necessary or even particularly helpful in</echo>
    <echo>        the Swinburne Project case.)</echo>
    <echo>help</echo>
    <echo>  What you are reading now.</echo>
    <echo>previewArticle                            (this is the default target)</echo>
    <echo>  transform one article XML file (specified via its 6-digit number with</echo>
    <echo>  -Ddocument.id=, or via a prompt) into HTML. The output file is placed</echo>
    <echo>  in the ${previewDir}${file.separator} subdirectory. It has relative links to assets in</echo>
    <echo>  this main directory (not the subdirectory), and thus should be suit-</echo>
    <echo>  able for viewing on your local machine. (And may not be suitable for</echo>
    <echo>  use on the server.)</echo>
    <echo>zipPreviewArticle</echo>
    <echo>  similar to 'previewArticle', but: a) The output HTML file *and* its</echo>
    <echo>  assets are archived together into a single ZIP file. b) The output</echo>
    <echo>  HTML file uses relative links to the assets in the same directory,</echo>
    <echo>  as would happen when the ZIP file is unzipped. Both the HTML file</echo>
    <echo>  and the ZIP file are put in the ${previewDir}${file.separator} subdirectory, overwrit-</echo>
    <echo>  ing any previous version there.</echo>
    <echo>generateIssues</echo>
    <echo>  generates the entire static site — index pages and HTML for each issue</echo>
    <echo>  listed in the toc${file.separator}toc.xml file, including the article itself, the author</echo>
    <echo>  biographies, and the “landing” page. The output is placed in the</echo>
    <echo>  ${toDir.static}/ directory, i.e. in a sibling to this directory, over-</echo>
    <echo>  writing any previous version. (Some temporary files are also placed in</echo>
    <echo>  ${toDir.base}/.) The output is designed to be viewed from a server, as</echo>
    <echo>  it uses absolute filepaths to its assets. Thus it will not work properly</echo>
    <echo>  (and will look ugly) if viewed on your local machine.</echo>
    <echo>generateSite</echo>
    <echo>  As above, but also ZIPs up the entire ${toDir.static}/ directory to make</echo>
    <echo>  it easy to transfer (e.g., to a server). The output file can be found at</echo>
    <echo>  ${toDir.base}${file.separator}${context}.zip.</echo>
  </target>
  
  <target name="html">
    <saxon-xslt basedir="${dir.to_xtf}" includes="*.xml" destdir="${dir.rdf}" force="true" extension=".rdf" style="${xslt.swinburne2rdf}" />
  </target>
  
  <target name="processStaticHTML">
    <xslt destdir="${toDir.static}"
      basedir="html"
      includes="*.xml"
      style="common${file.separator}xslt${file.separator}processHTML.xsl"
      >
      <factory name="${processor.name}">
        <attribute name="http://saxon.sf.net/feature/xinclude-aware" 
          value="on"/>
      </factory>
    </xslt>
  </target>
  
  <target name="processTEI">
    <xslt destdir="${toDir.tmpHTML}"
      basedir="tei"
      includes="*.xml"
      excludes="glossary.xml"
      style="common${file.separator}xslt${file.separator}p5-to-html.xsl"
      classpath="${processor.location}">
      <!-- To prevent Ant/Saxon from hitting the W3C servers too hard with requests 
        for the XHTML DTD, we use a catalog entry to map the ID to the local copy of 
        the DTD. -->
      <xmlcatalog>
        <dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"
          location="${toDir.base}${file.separator}xhtml1-strict.dtd"/>
      </xmlcatalog>
      <factory name="${processor.name}"/>
      <param name="assets-path" expression="..${file.separator}"/>
      <param name="context" expression="swinburne"/>
    </xslt>
    <xslt destdir="${toDir.static}${file.separator}/html"
      basedir="${toDir.tmpHTML}"
      includes="*.html"
      style="common${file.separator}xslt${file.separator}add-site-navigation.xsl"
      classpath="${processor.location}">
      <!-- To prevent Ant/Saxon from hitting the W3C servers too hard with requests 
        for the XHTML DTD, we use a catalog entry to map the ID to the local copy of 
        the DTD. -->
      <xmlcatalog>
        <dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"
          location="${toDir.base}${file.separator}xhtml1-strict.dtd"/>
      </xmlcatalog>
      <factory name="${processor.name}"/>
      <param name="assets-path" expression="..${file.separator}"/>
      <param name="context" expression="swinburne"/>
    </xslt>
  </target>
    

  <!-- Generate a static version of the Swinburne Project website. -->
  <target name="generateSite" depends="checkXmlResolver"
     description="Generate a full static copy of Swinburne Project intended for the Swinburne Project server. This is NOT a standalone copy.">
    <mkdir dir="${toDir.static}"/>
    <!-- Use the Ant build file created in "generateIssues" to copy articles' 
      resources to the right static directories. -->
    <!-- Copy specific files in the base directory. -->
    <!--
    -->
    <!-- Copy web assets. -->
    <!--
    <copy todir="${toDir.static}${file.separator}common">
      <fileset dir="common" excludes="lib/ tests/"/>
    </copy>

    <copy todir="${toDir.static}${file.separator}dist">
      <fileset dir="dist" excludes=""/>
    </copy>
    -->
    <copy todir="${toDir.static}">
      <fileset dir=".">
        <include name="*.html"/>
      </fileset>
    </copy>
    <!-- Download a copy of the W3C XHTML 1.0 Strict DTD, and its supporting 
      character entity files. If these are already present in the swinburne-static 
      directory, nothing is downloaded. -->
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent"
         dest="${toDir.base}" skipexisting="true"/>
    
    <antcall target="processTEI"/>
    <!-- Add headers and footers to static pages. -->
    
    
    <!-- Process static HTML pages -->
    <!--
    <xslt destdir="${toDir.static}"
      basedir="html"
      includes="*.xml"
      style="common${file.separator}xslt${file.separator}processHTML.xsl"
      >
      <factory name="${processor.name}">
        <attribute name="http://saxon.sf.net/feature/xinclude-aware" 
          value="on"/>
      </factory>
    </xslt>
    -->
    <!-- Generate the ZIP file of all articles' XML. -->
        <!-- Use the Ant build file created in "generateIssues" to zip up all article 
      XML. -->
    <!-- Generate the ZIP file of the entire static site. -->
    <!-- <antcall target="compressStatic"/> -->
  </target>
  
  <!-- Compress the static site's files for backup and transportation. -->
  <target name="compressStatic">
    <zip destfile="${toDir.base}${file.separator}${context}.zip">
      <fileset dir="${toDir.static}"/>
    </zip>
  </target>

  <target name="defaultnotice">
    <echo>#</echo>
    <echo># Generating single article preview.</echo>
    <echo>#</echo>
    <echo># For usage information issue `ant help`.</echo>
    <echo># For target list issue `ant -projecthelp`.</echo>
    <echo>#</echo>
  </target>
  
  <!-- Create an HTML preview version of a single article. -->
  <target name="previewArticle" depends="defaultnotice,checkXmlResolver" 
     description="Create an HTML preview version of a single article.">
    <!-- If the 'document.id' property wasn't already set using the command line, Ant 
      will prompt for it. -->
    <input unless:set="document.id" 
       message="Please type the ID of the article you want to preview:" 
       addproperty="document.id"/>
    <!-- Test the 'document.id' property to make sure it has 6 digits and doesn't 
      start with '9'. -->
    <condition property="document.id.ok" value="${document.id}">
      <matches string="${document.id}" pattern="^[0-8]\d{5,5}$"/>
    </condition>
    <fail unless="document.id.ok"
       message="An article ID must be 6 digits long. It must not start with '9'"/>
    <!-- Set the assets path if it hasn't already been set. -->
    <property unless:set="assets.path" name="assets.path" 
      value="..${file.separator}"/>
    <!-- If it doesn't exist yet, create the preview directory specified in 
      build-properties.xml. -->
    <mkdir dir="${previewDir}"/>
    <!-- Transform the article with XSLT, using the Saxon HE processor. -->
    <xslt in="articles${file.separator}${document.id}${file.separator}${document.id}.xml" 
          out="${previewDir}${file.separator}${document.id}.html"
          style="common${file.separator}xslt${file.separator}template_article.xsl"
          classpath="${processor.location}"
          force="true"
          failOnTransformationError="false">
      <factory name="${processor.name}"/>
      <param name="assets-path" expression="${assets.path}"/>
      <param name="context" expression="swinburne"/>
      <param name="dir-separator" expression="${file.separator}"/>
      <param name="doProofing" expression="true"/>
    </xslt>
    <echo message="Created article preview at ${previewDir}${file.separator}${document.id}.html"/>
  </target>
  
  <target name="zipPreviewArticle"
     description="Create a ZIP file which contains the HTML preview for a single article.">
    <!-- If the 'document.id' property wasn't already set using the command line, Ant 
      will prompt for it. -->
    <input unless:set="document.id" 
       message="Please type the ID of the article you want to preview:" 
       addproperty="document.id"/>
    <!-- The "previewArticle" task assumes that the common directory is a sibling of 
      the current one. For the ZIP, we want the HTML file at the same level as the 
      common directory. -->
    <property name="assets.path" value=".${file.separator}"/>
    <antcall target="previewArticle" inheritall="yes"/>
    <zip destfile="${previewDir}${file.separator}petrarchive-document-${document.id}.zip">
      <fileset dir="." includes="common/css/ common/js/"/>
      <fileset dir=".${file.separator}articles${file.separator}${document.id}" 
        excludes="**${file.separator}${document.id}.xml **${file.separator}${document.id}.xhtml"/>
      <fileset dir="${previewDir}">
        <filename name="${document.id}.html"/>
      </fileset>
    </zip>
  </target>
  
</project>
